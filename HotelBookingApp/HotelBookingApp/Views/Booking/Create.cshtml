@using HotelBookingApp.Models.Utils
@model Booking
@{
Layout = "~/Views/Shared/_Layout.cshtml";
ViewData["Title"] = "Create Booking";
}
@if (ViewBag.Alert != null)
{
<div class="alert alert-danger" role="alert">
    @ViewBag.Alert
</div>
}
<h2>Create Booking</h2>

<div>
    <label class="form-label">Available Rooms</label>
    <div class="mb-2" id="availableRoomsContainer">
        @foreach (var roomType in Enum.GetValues(typeof(RoomType)))
        {
        <span class="badge bg-info text-dark me-2 fs-3" id="roomType-@roomType">
                @roomType: <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            </span>
        }
    </div>
</div>

<form asp-action="Create" method="post">
    <div class="mb-3">
        <label class="form-label">Customer Name</label>
        <input asp-for="CustomerName" class="form-control"/>
    </div>
    <div class="mb-3">
        <label class="form-label">Customer NIC</label>
        <input asp-for="CustomerNIC" class="form-control"/>
    </div>
    <div class="mb-3">
        <label class="form-label">Room Types</label>
        <select asp-for="RoomTypes" class="form-control" asp-items="Html.GetEnumSelectList<RoomType>()" id="RoomTypes"
                multiple style="display:none;"></select>
        <div id="roomTypeChips" class="mb-2"></div>
        <button type="button" class="btn btn-secondary btn-sm" onclick="showRoomTypeSelector()">Add Room Type</button>
        <input type="hidden" name="RoomTypesWithCounts" id="RoomTypesWithCounts" />
    </div>
    <div class="mb-3">
        <label class="form-label">Check-In</label>
        <input asp-for="CheckIn" class="form-control" type="date"/>
    </div>
    <div class="mb-3">
        <label class="form-label">Check-Out</label>
        <input asp-for="CheckOut" class="form-control" type="date"/>
    </div>
    <div class="mb-3">
        <label class="form-label">Special Request</label>
        <input asp-for="SpecialRequest" class="form-control"/>
    </div>
    <div class="form-check mb-3">
        <input asp-for="IsRecurring" class="form-check-input" type="checkbox"/>
        <label class="form-check-label">Recurring</label>
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</form>

<script>
    const roomTypesSelect = document.getElementById('RoomTypes');
    const chipsContainer = document.getElementById('roomTypeChips');
    const roomTypeCounts = {};

    function showRoomTypeSelector() {
        roomTypesSelect.style.display = 'block';
        roomTypesSelect.focus();
    }

    roomTypesSelect.addEventListener('change', function () {
        Array.from(roomTypesSelect.selectedOptions).forEach(option => {
            if (option.value) {
                if (!roomTypeCounts[option.value]) {
                    roomTypeCounts[option.value] = 1;
                } else {
                    roomTypeCounts[option.value]++;
                }
                updateChips();
            }
        });
        roomTypesSelect.selectedIndex = -1;
        roomTypesSelect.style.display = 'none';
        updateSelectedRoomTypes();
    });

    function removeChip(value) {
        if (roomTypeCounts[value]) {
            roomTypeCounts[value]--;
            if (roomTypeCounts[value] <= 0) {
                delete roomTypeCounts[value];
            }
            updateChips();
            updateSelectedRoomTypes();
        }
    }

    function updateChips() {
        chipsContainer.innerHTML = '';
        Object.keys(roomTypeCounts).forEach(value => {
            const option = Array.from(roomTypesSelect.options).find(opt => opt.value === value);
            if (option) {
                const chip = document.createElement('span');
                chip.className = 'badge bg-primary me-1';
                chip.id = 'chip-' + value;
                chip.innerHTML = `${option.text}*${roomTypeCounts[value]} <span style="cursor:pointer;" onclick="removeChip('${value}')">&times;</span>`;
                chipsContainer.appendChild(chip);
            }
        });
    }

    function updateSelectedRoomTypes() {
        // Remove any previous hidden RoomTypes inputs
        const form = document.querySelector('form');
        Array.from(document.querySelectorAll('input[name="RoomTypes"]')).forEach(el => el.remove());

        // Create new RoomTypes hidden inputs based on counts
        Object.entries(roomTypeCounts).forEach(([value, count]) => {
            for (let i = 0; i < count; i++) {
                const hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = 'RoomTypes';
                hiddenInput.value = value;
                form.appendChild(hiddenInput);
            }
        });
    }


    async function showAvailableRooms(roomType) {
        const response = await fetch(`/Room/GetAvailableRooms?roomType=${roomType}`);
        if (response.ok) {
            const res = await response.text();
            const availableRooms = JSON.parse(res);
            document.getElementById('roomType-' + roomType).innerText = `${roomType}: ${availableRooms.length}`;
        } else {
            document.getElementById('roomType-' + roomType).innerText = `${roomType}: 0`;
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        const roomTypes = [
            @foreach (var roomType in Enum.GetValues(typeof(RoomType)))
            {
            @: '@roomType',
            }
        ];
        roomTypes.forEach(rt => showAvailableRooms(rt));
    });
</script>
